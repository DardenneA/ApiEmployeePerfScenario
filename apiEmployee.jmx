<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TP_APIEMPLOYEE" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV_APIEMPLOYEE_CONFIGURATION_TEST" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="APIEMPLOYEE_API_DNS_SERVER" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_API_DNS_SERVER</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.desc">DNS API server</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_API_PORT_SERVER" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_API_PORT_SERVER</stringProp>
            <stringProp name="Argument.value">9000</stringProp>
            <stringProp name="Argument.desc">DNS API server</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_ENCODING" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_ENCODING</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.desc">The encoding to use for API</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_PROTOCOL</stringProp>
            <stringProp name="Argument.value">HTTP</stringProp>
            <stringProp name="Argument.desc">The protocol HTTP/HTTPS to use for API</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_CONTEXT_PATH" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_CONTEXT_PATH</stringProp>
            <stringProp name="Argument.value">/</stringProp>
            <stringProp name="Argument.desc">APIM context path of the application</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_THREAD_DURATION" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_THREAD_DURATION</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIEMPLOYEE_THREAD_RAMPUP_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">APIEMPLOYEE_THREAD_RAMPUP_PERIOD</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_SUFFIX_LIST" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_SUFFIX_LIST</stringProp>
            <stringProp name="Argument.value">COM,FR</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_SUFFIX_COM" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_SUFFIX_COM</stringProp>
            <stringProp name="Argument.value">1,60</stringProp>
            <stringProp name="Argument.desc">60%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_SUFFIX_FR" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_SUFFIX_FR</stringProp>
            <stringProp name="Argument.value">61,100</stringProp>
            <stringProp name="Argument.desc">40%</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_IDENTITY" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">./identity.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">F_FIRSTNAME,F_LASTNAME</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV_EMAIL_DOMAIN" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">./email-domain.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">F_EMAIL_DOMAIN</stringProp>
      </CSVDataSet>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_EMPLOYEE_GET_ALL_EMPLOYEES" enabled="true">
        <stringProp name="TestPlan.comments">When a TF is used many times, factorize it like here and use MC into script that refers to this TF</stringProp>
      </TestFragmentController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R-HTTP_APIEMPLOYEE_GET_ALL_EMPLOYEE" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${APIEMPLOYEE_API_DNS_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">${APIEMPLOYEE_API_PORT_SERVER}</stringProp>
          <stringProp name="HTTPSampler.protocol">${APIEMPLOYEE_PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${APIEMPLOYEE_ENCODING}</stringProp>
          <stringProp name="HTTPSampler.path">${APIEMPLOYEE_CONTEXT_PATH}/employees</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RA_200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="TF_EMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
        <stringProp name="TestPlan.comments">When a TF is used many times, factorize it like here and use MC into script that refers to this TF</stringProp>
      </TestFragmentController>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R-HTTP_APIEMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;:&quot;${APIEMPLOYEE_FIRSTNAME}&quot;,&#xd;
	&quot;lastName&quot;:&quot;${APIEMPLOYEE_LASTNAME}&quot;,&#xd;
	&quot;mail&quot;:&quot;${APIEMPLOYEE_EMAIL}&quot;,&#xd;
	&quot;password&quot;:&quot;${APIEMPLOYEE_PASSWORD}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${APIEMPLOYEE_API_DNS_SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">${APIEMPLOYEE_API_PORT_SERVER}</stringProp>
          <stringProp name="HTTPSampler.protocol">${APIEMPLOYEE_PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${APIEMPLOYEE_ENCODING}</stringProp>
          <stringProp name="HTTPSampler.path">${APIEMPLOYEE_CONTEXT_PATH}/employee</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RA_201" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JEE_EMPLOYEE_ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">EMPLOYEE_ID_FROM_POST_EXTR</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">EMPLOYEE_ID_FROM_POST_ERR</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SC0_TG_POST_X_EMPLOYEE" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${APIEMPLOYEE_THREAD_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Init database</stringProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="PC_SC1_POST_EMPLOYEE" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="APIEMPLOYEE_FIRSTNAME" elementType="Argument">
                <stringProp name="Argument.name">APIEMPLOYEE_FIRSTNAME</stringProp>
                <stringProp name="Argument.value">${F_FIRSTNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="APIEMPLOYEE_LASTNAME" elementType="Argument">
                <stringProp name="Argument.name">APIEMPLOYEE_LASTNAME</stringProp>
                <stringProp name="Argument.value">${F_LASTNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_EMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_GENERATE_EMAIL_PASSWORD" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def FIRSTNAME = vars.get(&quot;APIEMPLOYEE_FIRSTNAME&quot;);
def LASTNAME = vars.get(&quot;APIEMPLOYEE_LASTNAME&quot;);
def DOMAIN = vars.get(&quot;F_EMAIL_DOMAIN&quot;);
def SUFFIXES = vars.get(&quot;EMAIL_SUFFIX_LIST&quot;);
def SUFFIXES_ITEMS = SUFFIXES.split(&apos;,&apos;).collect{it as String}; //SUFFIXES_ITEMS[0] = COM, SUFFIXES_ITEMS[1] = FR
def SUFFIXES_ITEMS_SIZE = SUFFIXES_ITEMS.size();
def EMAIL;

Random rnd = new Random();
int randInt = rnd.nextInt(100 - 1) + 1;  //IntRandom(1,100)

for (int i=0 ; i&lt;SUFFIXES_ITEMS_SIZE ; i++) {
	
	def ONE_SUFFIX = vars.get(&quot;EMAIL_SUFFIX_&quot;+SUFFIXES_ITEMS[i]); //EMAIL_SUFFIX_COM=&quot;1,60&quot;
	def ONE_SUFFIX_BOUNDARIES = ONE_SUFFIX.split(&apos;,&apos;).collect{it as String}; //ONE_SUFFIX_BOUNDARIES[0]=1 ; ONE_SUFFIX_BOUNDARIES[1]=60
	def DOWN = new Integer(ONE_SUFFIX_BOUNDARIES[0]);
	def UP = new Integer(ONE_SUFFIX_BOUNDARIES[1]);

	if (DOWN &lt;= randInt  &amp;&amp; randInt&lt;=UP ) {
		//log.info(&quot;randInt c [&quot;+DOWN+&quot;,&quot;+UP+&quot;]&quot;);
		EMAIL = SUFFIXES_ITEMS[i];
		break;
	}

}

EMAIL = FIRSTNAME.toLowerCase() + &quot;.&quot; + LASTNAME.toLowerCase() + &quot;@&quot;+ DOMAIN.toLowerCase() + &quot;.&quot; + EMAIL.toLowerCase();

log.info(&quot;EMAIL found = &quot;+EMAIL);
out.println(&quot;EMAIL found = &quot;+EMAIL);

String randomString = org.apache.commons.lang.RandomStringUtils.random(9, true, true)

//export data
vars.put(&quot;APIEMPLOYEE_EMAIL&quot;,EMAIL)
vars.put(&quot;APIEMPLOYEE_PASSWORD&quot;,randomString)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MC_EMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1660275045">TP_APIEMPLOYEE</stringProp>
                <stringProp name="-107759803">TF_EMPLOYEE_POST_AN_EMPLOYEE</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SC1_TG_GET_ALL_EMPLOYEE" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${APIEMPLOYEE_THREAD_RAMPUP_PERIOD}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${APIEMPLOYEE_THREAD_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MC_EMPLOYEE_GET_ALL_EMPLOYEES" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="1660275045">TP_APIEMPLOYEE</stringProp>
            <stringProp name="-652689542">TF_EMPLOYEE_GET_ALL_EMPLOYEES</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SC2_TG_POST_GET_DELETE_AN_EMPLOYEE" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${APIEMPLOYEE_THREAD_RAMPUP_PERIOD}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${APIEMPLOYEE_THREAD_DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="PC_SC1_POST_EMPLOYEE" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="APIEMPLOYEE_FIRSTNAME" elementType="Argument">
                <stringProp name="Argument.name">APIEMPLOYEE_FIRSTNAME</stringProp>
                <stringProp name="Argument.value">${F_FIRSTNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="APIEMPLOYEE_LASTNAME" elementType="Argument">
                <stringProp name="Argument.name">APIEMPLOYEE_LASTNAME</stringProp>
                <stringProp name="Argument.value">${F_LASTNAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="APIEMPLOYEE_PASSWORD" elementType="Argument">
                <stringProp name="Argument.name">APIEMPLOYEE_PASSWORD</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_EMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_GENERATE_EMAIL" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def FIRSTNAME = vars.get(&quot;APIEMPLOYEE_FIRSTNAME&quot;);
def LASTNAME = vars.get(&quot;APIEMPLOYEE_LASTNAME&quot;);
def DOMAIN = vars.get(&quot;F_EMAIL_DOMAIN&quot;);
def SUFFIXES = vars.get(&quot;EMAIL_SUFFIX_LIST&quot;);
def SUFFIXES_ITEMS = SUFFIXES.split(&apos;,&apos;).collect{it as String}; //SUFFIXES_ITEMS[0] = COM, SUFFIXES_ITEMS[1] = FR
def SUFFIXES_ITEMS_SIZE = SUFFIXES_ITEMS.size();
def EMAIL;

Random rnd = new Random();
int randInt = rnd.nextInt(100 - 1) + 1;  //IntRandom(1,100)

for (int i=0 ; i&lt;SUFFIXES_ITEMS_SIZE ; i++) {
	
	def ONE_SUFFIX = vars.get(&quot;EMAIL_SUFFIX_&quot;+SUFFIXES_ITEMS[i]); //EMAIL_SUFFIX_COM=&quot;1,60&quot;
	def ONE_SUFFIX_BOUNDARIES = ONE_SUFFIX.split(&apos;,&apos;).collect{it as String}; //ONE_SUFFIX_BOUNDARIES[0]=1 ; ONE_SUFFIX_BOUNDARIES[1]=60
	def DOWN = new Integer(ONE_SUFFIX_BOUNDARIES[0]);
	def UP = new Integer(ONE_SUFFIX_BOUNDARIES[1]);

	if (DOWN &lt;= randInt  &amp;&amp; randInt&lt;=UP ) {
		//log.info(&quot;randInt c [&quot;+DOWN+&quot;,&quot;+UP+&quot;]&quot;);
		EMAIL = SUFFIXES_ITEMS[i];
		break;
	}

}

EMAIL = FIRSTNAME.toLowerCase() + &quot;.&quot; + LASTNAME.toLowerCase() + &quot;@&quot;+ DOMAIN.toLowerCase() + &quot;.&quot; + EMAIL.toLowerCase();

log.info(&quot;EMAIL found = &quot;+EMAIL);
out.println(&quot;EMAIL found = &quot;+EMAIL);

//export data
vars.put(&quot;APIEMPLOYEE_EMAIL&quot;,EMAIL)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MC_EMPLOYEE_POST_AN_EMPLOYEE" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="1660275045">TP_APIEMPLOYEE</stringProp>
                <stringProp name="-107759803">TF_EMPLOYEE_POST_AN_EMPLOYEE</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="PC_SC1_GET_ONE_PUT_DELETE_GET_ALL" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="EMPLOYEE_ID" elementType="Argument">
                <stringProp name="Argument.name">EMPLOYEE_ID</stringProp>
                <stringProp name="Argument.value">${EMPLOYEE_ID_FROM_POST_EXTR}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_EMPLOYEE_GET_AN_EMPLOYEE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R-HTTP_APIEMPLOYEE_GET_AN_EMPLOYEE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${APIEMPLOYEE_API_DNS_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port">${APIEMPLOYEE_API_PORT_SERVER}</stringProp>
              <stringProp name="HTTPSampler.protocol">${APIEMPLOYEE_PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${APIEMPLOYEE_ENCODING}</stringProp>
              <stringProp name="HTTPSampler.path">${APIEMPLOYEE_CONTEXT_PATH}/employee/${EMPLOYEE_ID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RA_200_204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">33</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_EMPLOYEE_PUT_AN_EMPLOYEE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223_GENERATE_PASSWORD" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String randomString = org.apache.commons.lang.RandomStringUtils.random(9, true, true)

vars.put(&quot;APIEMPLOYEE_PASSWORD&quot;,randomString)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R-HTTP_APIEMPLOYEE_PUT_AN_EMPLOYEE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;password&quot;:&quot;${APIEMPLOYEE_PASSWORD}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${APIEMPLOYEE_API_DNS_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port">${APIEMPLOYEE_API_PORT_SERVER}</stringProp>
              <stringProp name="HTTPSampler.protocol">${APIEMPLOYEE_PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${APIEMPLOYEE_ENCODING}</stringProp>
              <stringProp name="HTTPSampler.path">${APIEMPLOYEE_CONTEXT_PATH}/employee/${EMPLOYEE_ID}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RA_200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MC_EMPLOYEE_GET_ALL_EMPLOYEES" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1660275045">TP_APIEMPLOYEE</stringProp>
              <stringProp name="-652689542">TF_EMPLOYEE_GET_ALL_EMPLOYEES</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TC_EMPLOYEE_DELETE_AN_EMPLOYEE" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="R-HTTP_APIEMPLOYEE_DELETE_AN_EMPLOYEE" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${APIEMPLOYEE_API_DNS_SERVER}</stringProp>
              <stringProp name="HTTPSampler.port">${APIEMPLOYEE_API_PORT_SERVER}</stringProp>
              <stringProp name="HTTPSampler.protocol">${APIEMPLOYEE_PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">${APIEMPLOYEE_ENCODING}</stringProp>
              <stringProp name="HTTPSampler.path">${APIEMPLOYEE_CONTEXT_PATH}/employee/${EMPLOYEE_ID}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RA_204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="MC_EMPLOYEE_GET_ALL_EMPLOYEES" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="1660275045">TP_APIEMPLOYEE</stringProp>
              <stringProp name="-652689542">TF_EMPLOYEE_GET_ALL_EMPLOYEES</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
